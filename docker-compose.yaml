x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: airflow.Dockerfile  # Airflow egyéni image
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  volumes:
    - ./mlruns:/app/mlruns
    - ./dags:/opt/airflow/dags
  networks:
    - mlflow-airflow-network

services:
  # MLflow és Flask szolgáltatás (a te Dockerfile-od alapján)
  mlflow-flask:
    build: .  # Ez a te Dockerfile-od
    ports:
      - "5000:5000"   # Flask API
      - "5102:5102"   # MLflow UI
    environment:
      MLFLOW_TRACKING_URI: "http://mlflow-flask:5102"
    networks:
      - mlflow-airflow-network
    depends_on:
      - postgres
      - redis

  # Airflow adatbázis
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    networks:
      - mlflow-airflow-network
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data

  # Redis üzenetsor
  redis:
    image: redis:7.2-bookworm
    networks:
      - mlflow-airflow-network

  # Airflow inicializálás
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command: -c 'airflow db init && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com'
    depends_on:
      - postgres

  # Airflow komponensek
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
      - airflow-init
      - postgres
      - redis
      - mlflow-flask

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      - airflow-init
      - postgres
      - redis
      - mlflow-flask

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    depends_on:
      - airflow-init
      - postgres
      - redis
      - mlflow-flask

volumes:
  postgres-db-volume:

networks:
  mlflow-airflow-network:
    driver: bridge